DROP DATABASE IF EXISTS SAMDDB;

CREATE DATABASE IF NOT EXISTS SAMDDB;

USE SAMDDB;

/* ######################################
TABELAS SEM FOREIGN KEYS (PR??-POPULADAS) 
####################################### */

CREATE TABLE IF NOT EXISTS INST_TBL /*INSTITUICAO / INSTITUTION */
(
	INST_ID INT UNSIGNED AUTO_INCREMENT,
    INST_COD INT(3) UNIQUE NOT NULL,
    INST_NAME VARCHAR(50) NOT NULL,
    INST_DESC VARCHAR(255),
    INST_TEL VARCHAR(13) NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    ESTATUS CHAR(1) DEFAULT '',
    UPDATEDAT DATETIME,
    CONSTRAINT INST_PK PRIMARY KEY (INST_ID)
    
);

CREATE TABLE IF NOT EXISTS SVC_TBL /* SERVI??O / SERVICE */
(
	SVC_ID INT UNSIGNED AUTO_INCREMENT,
    SVC_NAME VARCHAR(50) NOT NULL,
    SVC_DESC VARCHAR(100) NOT NULL,
    SVC_DEADLINE INT(3) NOT NULL,
    ESTATUS CHAR(1) DEFAULT '',
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT SVC_PK PRIMARY KEY (SVC_ID)
    
);

CREATE TABLE IF NOT EXISTS EIXOTEC_TBL /* EIXO TECNOL??GICO */
(
	EIXOTEC_ID INT UNSIGNED AUTO_INCREMENT,
    EIXOTEC_NAME VARCHAR(50),
    EIXOTEC_DESC VARCHAR(255),
    ESTATUS CHAR(1) DEFAULT '',
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT EIXOTEC_PK PRIMARY KEY (EIXOTEC_ID)

);


CREATE TABLE IF NOT EXISTS ROLE_TBL /* CARGO / ROLE */
(
	ROLE_ID INT UNSIGNED AUTO_INCREMENT,
    ROLE_NAME VARCHAR(30) NOT NULL,
    ROLE_DESC VARCHAR(255),
    ROLE_PAYMENT DOUBLE(8,2) NOT NULL,
    ESTATUS CHAR(1) DEFAULT '',
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT ROLE_PK PRIMARY KEY (ROLE_ID)

);

/* ######################################
FIM DAS TABELAS SEM FOREIGN KEYS (PR??-POPULADAS) 
####################################### */

/* #################################### */
/* ########### TABELAS 1-N ############ */
/* #################################### */

CREATE TABLE IF NOT EXISTS USER_TBL /* USUARIO */
(
	USER_ID INT UNSIGNED AUTO_INCREMENT,
    USER_RM INT(9) UNIQUE NOT NULL,
    USER_FULL_NAME VARCHAR(60) NOT NULL,
    USER_BIRTH_DATE DATE NOT NULL,
    USER_CPF VARCHAR(14) NOT NULL UNIQUE,
    USER_RG VARCHAR(13) NOT NULL UNIQUE,
    USER_GENRE ENUM('M', 'F', 'O') NOT NULL,
    USER_PHOTO VARCHAR(20) NOT NULL,
    USER_EMAIL_PERS VARCHAR(60) UNIQUE NOT NULL, /* email pessoal*/
    USER_EMAIL_INST VARCHAR(60) UNIQUE NOT NULL, /* email institucional*/
    USER_CEL VARCHAR(14) NOT NULL UNIQUE,
    USER_TEL VARCHAR(13) NOT NULL UNIQUE,
    ESTATUS CHAR(1) DEFAULT '',
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    INST_FK INT UNSIGNED NOT NULL,
    CONSTRAINT USER_FK PRIMARY KEY (USER_ID),
    CONSTRAINT INST_USER_FK FOREIGN KEY (INST_FK) REFERENCES INST_TBL(INST_ID)

);

CREATE TABLE IF NOT EXISTS DOC_TBL
(
    DOC_ID INT UNSIGNED AUTO_INCREMENT,
    DOC_NAME VARCHAR(50) NOT NULL,
    DOC_DESC VARCHAR(255),
    DOC_FILE VARCHAR(40) NOT NULL,
    ESTATUS CHAR(1) DEFAULT '',
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    USER_FK INT UNSIGNED NOT NULL,
    CONSTRAINT DOC_PK PRIMARY KEY (DOC_ID),
    CONSTRAINT DOC_USER_FK FOREIGN KEY (USER_FK) REFERENCES USER_TBL(USER_ID)
);

CREATE TABLE IF NOT EXISTS LOGIN_TBL
(
	LOGIN_ID    INT UNSIGNED AUTO_INCREMENT,
    USERNAME    VARCHAR(30) UNIQUE NOT NULL,
    PASSWD      VARCHAR(128) NOT NULL,
    USERTYPE    ENUM('A','E', 'S', 'T'), /* ADMIN, EMPLOYEE, STUDENT, TEACHER */
    ESTATUS 	CHAR(1) DEFAULT '',
    CREATEDAT  	DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT  	DATETIME,
    USER_FK     INT UNSIGNED NOT NULL,
    CONSTRAINT LOGIN_PK PRIMARY KEY(LOGIN_ID),
    CONSTRAINT LOGIN_USER_FK FOREIGN KEY (USER_FK) REFERENCES USER_TBL(USER_ID)
    
);

CREATE TABLE IF NOT EXISTS STUDENT_TBL /* ESTUDANTE/ALUNO  / STUDENT */
(
	STUDENT_ID INT UNSIGNED AUTO_INCREMENT,
    STUDENT_ANSW VARCHAR(50), /* responsvavel */ 
    USER_FK INT UNSIGNED NOT NULL,
    CONSTRAINT USER_PK PRIMARY KEY(STUDENT_ID),
    CONSTRAINT USER_STUDENT_FK FOREIGN KEY(USER_FK) REFERENCES USER_TBL(USER_ID)

);

CREATE TABLE IF NOT EXISTS COURSE_TBL /* curso / course */
(
	COURSE_ID INT UNSIGNED AUTO_INCREMENT,
    COURSE_NAME VARCHAR(60) UNIQUE NOT NULL,
    COURSE_DESC VARCHAR(500),
    COURSE_HOURS INT(4) NOT NULL,
    SEMESTRIES INT(1) NOT NULL, 
    MARKET VARCHAR(1000),
    ESTATUS CHAR(1) DEFAULT '',
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    EIXOTEC_FK INT UNSIGNED NOT NULL,
    INST_FK INT UNSIGNED NOT NULL,
    CONSTRAINT COURSE_PK PRIMARY KEY (COURSE_ID),
    CONSTRAINT EIXOTEC_COURSE_FK FOREIGN KEY (EIXOTEC_FK) REFERENCES EIXOTEC_TBL(EIXOTEC_ID)
);

CREATE TABLE IF NOT EXISTS COMP_TBL /* componentes (por modulo. Ex: Banco de dados 3) / components*/
(
	COMP_ID INT UNSIGNED AUTO_INCREMENT,
    COMP_NAME VARCHAR(100) NOT NULL,
    COMP_DESC VARCHAR(255),
    COMP_HOURS INT(3) NOT NULL,
    ESTATUS CHAR(1) DEFAULT '',
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    COURSE_FK INT UNSIGNED NOT NULL,
    CONSTRAINT COMP_PK PRIMARY KEY(COMP_ID),
    CONSTRAINT COMP_COURSE_FK FOREIGN KEY (COURSE_FK) REFERENCES COURSE_TBL(COURSE_ID)
    
);


CREATE TABLE IF NOT EXISTS CLASS_TBL /* aula / class */
(
    CLASS_ID INT UNSIGNED AUTO_INCREMENT,
    CLASS_DATE DATE NOT NULL,
    CLASS_DESC VARCHAR(255),
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    COMP_FK INT UNSIGNED NOT NULL,
    CONSTRAINT CLASS_PK PRIMARY KEY(CLASS_ID),
    CONSTRAINT CLASS_COMP_FK FOREIGN KEY (COMP_FK) REFERENCES COMP_TBL(COMP_ID)
);

CREATE TABLE IF NOT EXISTS LESSION_TBL  /*  MATERIAL / LESSION */
(
    LESSION_ID INT UNSIGNED AUTO_INCREMENT,
    LESSION_NAME VARCHAR(50) UNIQUE NOT NULL,
    LESSION_DESC VARCHAR(100),
    LESSION_SIZE INT NOT NULL,
    LESSION_EXT VARCHAR(10) NOT NULL,
    LESSION_FILE VARCHAR(40) NOT NULL,
    ESTATUS CHAR(1) DEFAULT '',
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    COMP_FK INT UNSIGNED NOT NULL,
    CONSTRAINT LESSION_PK PRIMARY KEY (LESSION_ID),
    CONSTRAINT LESSION_COMP_FK FOREIGN KEY (COMP_FK) REFERENCES COMP_TBL(COMP_ID)
);


CREATE TABLE IF NOT EXISTS ACTVT_TBL /* atividade / activity */
(
    ACTVT_ID INT UNSIGNED AUTO_INCREMENT,
    ACTVT_NAME VARCHAR(60),
    ACTVT_DESC VARCHAR(255),
    STARTING_DATE DATE,
    ENDING_DATE DATE,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CLASS_FK INT UNSIGNED NOT NULL,
    CONSTRAINT ACTVT_PK PRIMARY KEY (ACTVT_ID),
    CONSTRAINT ACTVT_CLASS_FK FOREIGN KEY (CLASS_FK) REFERENCES CLASS_TBL(CLASS_ID)
);
 
CREATE TABLE IF NOT EXISTS PRSCLIST_TBL /* chamada / lista de presen??a / presence list */
(
    PRSCLIST_ID INT UNSIGNED AUTO_INCREMENT,
    PRSCLIST_DATE DATE,
    PRSCLIST_BLOCK INT,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CLASS_FK INT UNSIGNED NOT NULL,
    CONSTRAINT PRSCLIST_PK PRIMARY KEY (PRSCLIST_ID),
    CONSTRAINT PRSCLIST_CLASS_FK FOREIGN KEY (CLASS_FK) REFERENCES CLASS_TBL(CLASS_ID)
);

CREATE TABLE IF NOT EXISTS TCHR_TBL /* PROFESSOR / TEACHER */
(
    TCHR_ID INT UNSIGNED AUTO_INCREMENT,
    USER_FK INT UNSIGNED NOT NULL,
    CONSTRAINT TEACHER_PK PRIMARY KEY (TCHR_ID),
    CONSTRAINT TEACHER_USER_FK FOREIGN KEY (USER_FK) REFERENCES USER_TBL(USER_ID)
);

CREATE TABLE IF NOT EXISTS EMPL_TBL /* FUNCIONARIO / EMPLOYEE */
(
    EMPL_ID INT UNSIGNED AUTO_INCREMENT,
    USER_FK INT UNSIGNED NOT NULL,
    CONSTRAINT EMPL_PK PRIMARY KEY (EMPL_ID),
    CONSTRAINT EMPL_USER_FK FOREIGN KEY (USER_FK) REFERENCES USER_TBL(USER_ID)
);

CREATE TABLE IF NOT EXISTS ADDR_TBL /* ENDERE??O / ADDRESS */
(
    ADDR_ID INT UNSIGNED AUTO_INCREMENT,
    ADDR_CEP INT NOT NULL,
    ADDR_NAME VARCHAR(70) UNIQUE NOT NULL, /* ENDERE???? */
    ADDR_NGH VARCHAR(40) NOT NULL, /* BAIRRO */
    ADDR_CITY VARCHAR(40) NOT NULL, /* CIDADE */
    ADDR_STATE VARCHAR(2) NOT NULL, /* UF (exemplo: SP) */
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    USER_FK INT UNSIGNED NOT NULL,
    CONSTRAINT ADDR_FK PRIMARY KEY (ADDR_ID),
    CONSTRAINT ADDR_USER_FK FOREIGN KEY (USER_FK) REFERENCES USER_TBL(USER_ID)
);

CREATE TABLE IF NOT EXISTS EVENT_TBL /* EVENTO */
(
    EVENT_ID INT UNSIGNED AUTO_INCREMENT,
    EVENT_TITLE VARCHAR(40) UNIQUE NOT NULL,
    EVENT_DESC VARCHAR(255),
    EVENT_START DATE NOT NULL,
    EVENT_END DATE NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    INST_FK INT UNSIGNED NOT NULL,
    CONSTRAINT EVENT_PK PRIMARY KEY(EVENT_ID),
    CONSTRAINT EVENT_INST_FK FOREIGN KEY (INST_FK) REFERENCES INST_TBL(INST_ID)
);

CREATE TABLE IF NOT EXISTS ARTCL_TBL /* ARTIGO / PUBLICA????O */
(
    ARTCL_ID INT UNSIGNED AUTO_INCREMENT,
    ARTCL_TITLE VARCHAR(100) UNIQUE NOT NULL,
    ARTCL_CONTENT VARCHAR(2000) NOT NULL,
    ARTCL_SLUG VARCHAR(40),
    ESTATUS CHAR(1) DEFAULT '',
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    INST_FK INT UNSIGNED NOT NULL,
    CONSTRAINT ARTCL_PK PRIMARY KEY (ARTCL_ID),
    CONSTRAINT ARTCL_INST_FK FOREIGN KEY (INST_FK) REFERENCES INST_TBL(INST_ID)
);

CREATE TABLE IF NOT EXISTS NTF_TBL /* NOTIFICA????O */
(
    NTF_ID INT UNSIGNED AUTO_INCREMENT,
    NTF_TITLE VARCHAR(40),
    NTF_CONTENT VARCHAR(1000),
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    INST_FK INT UNSIGNED NOT NULL,
    CONSTRAINT NTF_PK PRIMARY KEY (NTF_ID),
    CONSTRAINT NTF_INST_FK FOREIGN KEY (INST_FK) REFERENCES INST_TBL(INST_ID)
);

/* #################################### */
/* ###### FIM DAS TABELAS 1-N ######### */
/* #################################### */

/* #################################### */
/* ########### TABELAS N-N ############ */
/* #################################### */

CREATE TABLE IF NOT EXISTS ROLE_EMPL_TBL /* CARGO FUNCIONARO /  */
(
    EMPL_FK INT UNSIGNED NOT NULL,
    ROLE_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT ROLEEMPL_EMPL_FK FOREIGN KEY (EMPL_FK) REFERENCES EMPL_TBL(EMPL_ID),
    CONSTRAINT ROLEEMPL_ROLE_FK FOREIGN KEY (ROLE_FK) REFERENCES ROLE_TBL(ROLE_ID)
);

CREATE TABLE IF NOT EXISTS INST_SVC_TBL /* SERVI??O DA INSTITUI????O / INSTITUTION SERVICE */
(
    INST_FK INT UNSIGNED NOT NULL,
    SVC_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT INSTSVC_INST_FK FOREIGN KEY (INST_FK) REFERENCES INST_TBL(INST_ID),
    CONSTRAINT INSTSVC_SVC_FK FOREIGN KEY (SVC_FK) REFERENCES SVC_TBL(SVC_ID)
);

CREATE TABLE IF NOT EXISTS INST_COURSE_TBL /* CURSO DA INSTITUI????O / INSTITUTION COURSE */
(
    COURSE_FK INT UNSIGNED NOT NULL,
    INST_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT INSTCOURSE_COURSE_FK FOREIGN KEY (COURSE_FK) REFERENCES COURSE_TBL(COURSE_ID),
    CONSTRAINT INSTCOURSE_INST_FK FOREIGN KEY (INST_FK) REFERENCES INST_TBL(INST_ID)
);

CREATE TABLE IF NOT EXISTS TCHR_COMP_TBL /* COMPONENTE DO PROFESSOR / TEACHER COMPONENT */
(
    TCHR_FK INT UNSIGNED NOT NULL,
    COMP_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT TCHRCOMP_TCHR_FK FOREIGN KEY (TCHR_FK) REFERENCES TCHR_TBL(TCHR_ID),
    CONSTRAINT TCHRCOMP_COMP_FK FOREIGN KEY (COMP_FK) REFERENCES COMP_TBL(COMP_ID)
);

CREATE TABLE IF NOT EXISTS COURSE_COMP_TBL /* COMPONENTE DO CURSO / COURSE COMPONENT */
(
    COURSE_FK INT UNSIGNED NOT NULL,
    COMP_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT COURSECOMP_COURSE_FK FOREIGN KEY (COURSE_FK) REFERENCES COURSE_TBL(COURSE_ID),
    CONSTRAINT COURSECOMP_COMP_FK FOREIGN KEY (COMP_FK) REFERENCES COMP_TBL(COMP_ID)
);

CREATE TABLE IF NOT EXISTS PRSCLIST_STUDENT_TBL /* CHAMADA */
(
    PRSCLIST_FK INT UNSIGNED NOT NULL,
    STUDENT_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT PRSCLISTSTUDENT_PRSCLIST_ID FOREIGN KEY (PRSCLIST_FK) REFERENCES PRSCLIST_TBL(PRSCLIST_ID),
    CONSTRAINT PRSCLISTSTUDENT_STUDENT_ID FOREIGN KEY (STUDENT_FK) REFERENCES STUDENT_TBL(STUDENT_ID)
);

CREATE TABLE IF NOT EXISTS NTF_ACTVT_TBL /* NOTIFICA????O ATIVIDADE */
(
    NTF_FK INT UNSIGNED NOT NULL,
    ACTVT_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT NTFACTVT_NTF_FK FOREIGN KEY(NTF_FK)     REFERENCES NTF_TBL(NTF_ID),
    CONSTRAINT NTFACTVT_ACTVT_FK  FOREIGN KEY(ACTVT_FK) REFERENCES ACTVT_TBL(ACTVT_ID)
);

CREATE TABLE IF NOT EXISTS NTF_EVENT_TBL /* NOTIFICA????O EVENTO */
(
    NTF_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    EVENT_FK INT UNSIGNED NOT NULL,
    CONSTRAINT NTFEVENT_NTF_FK FOREIGN KEY(NTF_FK) REFERENCES NTF_TBL(NTF_ID),
    CONSTRAINT NTFEVENT_EVENT_FK FOREIGN KEY(EVENT_FK) REFERENCES EVENT_TBL(EVENT_ID)
);

CREATE TABLE IF NOT EXISTS NTF_LESSION_TBL /* NOTIFICA????O MATERIAL */
(
    NTF_FK INT UNSIGNED NOT NULL,
    LESSION_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT NTFLESSION_NTF_FK FOREIGN KEY(NTF_FK) REFERENCES NTF_TBL(NTF_ID),
    CONSTRAINT NTFLESSION_LESSION_FK FOREIGN KEY(LESSION_FK) REFERENCES LESSION_TBL(LESSION_ID)
);

CREATE TABLE IF NOT EXISTS NTF_ARTCL_TBL /* NOTIFICA????O ARTIGO */
(
    NTF_FK INT UNSIGNED NOT NULL,
    ARTCL_FK INT UNSIGNED NOT NULL,
    CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT DATETIME,
    CONSTRAINT NTFARTCL_NTF_FK FOREIGN KEY(NTF_FK) REFERENCES NTF_TBL(NTF_ID),
    CONSTRAINT NTFARTCL_ARTCL_FK FOREIGN KEY(ARTCL_FK) REFERENCES ARTCL_TBL(ARTCL_ID)
);

--
/* PARA DELETAR AS TABELAS PARA CRIAR NOVAMENTE, COPIE O RESULTADO DESTA QUERY E EXECUTE COMO UM SQL*/
